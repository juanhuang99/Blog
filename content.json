{"meta":{"title":"Juan's Home","subtitle":"Be yourself, and be the person you hope to be","description":null,"author":"吃葡萄不吐番茄皮","url":"https://juanhuang99.github.io"},"pages":[{"title":"","date":"2019-01-03T10:04:48.447Z","updated":"2018-07-17T01:46:01.424Z","comments":true,"path":"404.html","permalink":"https://juanhuang99.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2019-01-03T10:04:48.449Z","updated":"2018-07-17T05:25:55.977Z","comments":true,"path":"README.html","permalink":"https://juanhuang99.github.io/README.html","excerpt":"","text":"博客访问地址 点击"},{"title":"","date":"2019-01-04T02:54:19.753Z","updated":"2019-01-04T02:39:00.958Z","comments":true,"path":"nextConfig.json","permalink":"https://juanhuang99.github.io/nextConfig.json","excerpt":"","text":"{\"override\":false,\"favicon\":{\"small\":\"/images/favicon-16x16-next.png\",\"medium\":\"/images/favicon-32x32-next.png\",\"apple_touch_icon\":\"/images/apple-touch-icon-next.png\",\"safari_pinned_tab\":\"/images/logo.svg\"},\"keywords\":\"Hexo, NexT\",\"rss\":false,\"footer\":{\"icon\":\"user\",\"copyright\":null,\"powered\":false,\"theme\":{\"enable\":false,\"version\":false}},\"canonical\":true,\"seo\":false,\"index_with_subtitle\":false,\"menu\":{\"home\":\"/ || home\",\"categories\":\"/categories/ || th\",\"archives\":\"/archives/ || archive\",\"tags\":\"/tags/ || tags\"},\"menu_icons\":{\"enable\":true},\"title\":\"吃葡萄不吐番茄皮\",\"subtitle\":\"Be yourself, and be the person you hope to be\",\"avatar\":\"/images/personal-avatar.jpg\",\"author\":\"吃葡萄不吐番茄皮\",\"description\":\"欢迎来到我的个人站～\",\"scheme\":\"Mist\",\"social_icons\":{\"enable\":true,\"icons_only\":false,\"transition\":false},\"links_icon\":\"link\",\"links_title\":\"Links\",\"links_layout\":\"block\",\"toc\":{\"enable\":true,\"number\":true,\"wrap\":false},\"sidebar\":{\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\"scroll_to_more\":true,\"save_scroll\":false,\"excerpt_description\":true,\"auto_excerpt\":{\"enable\":false,\"length\":150},\"post_meta\":{\"item_text\":true,\"created_at\":true,\"updated_at\":false,\"categories\":true},\"post_wordcount\":{\"item_text\":true,\"wordcount\":false,\"min2read\":false,\"totalcount\":false,\"separated_meta\":true},\"post_copyright\":{\"enable\":false,\"license\":\"CC BY-NC-SA 3.0\",\"license_url\":\"https://creativecommons.org/licenses/by-nc-sa/3.0/\"},\"mobile_layout_economy\":false,\"android_chrome_color\":\"#222\",\"custom_logo\":{\"enabled\":false,\"image\":null},\"highlight_theme\":\"normal\",\"font\":{\"enable\":false,\"host\":null,\"global\":{\"external\":true,\"family\":\"Lato\",\"size\":null},\"headings\":{\"external\":true,\"family\":null,\"size\":null},\"posts\":{\"external\":true,\"family\":null},\"logo\":{\"external\":true,\"family\":null,\"size\":null},\"codes\":{\"external\":true,\"family\":null,\"size\":null}},\"mathjax\":{\"enable\":false,\"per_page\":false,\"cdn\":\"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML\"},\"han\":false,\"disqus\":{\"enable\":false,\"shortname\":null,\"count\":true},\"changyan\":{\"enable\":false,\"appid\":null,\"appkey\":null},\"valine\":{\"enable\":false,\"appid\":null,\"appkey\":null,\"notify\":false,\"verify\":false,\"placeholder\":\"Just go go\",\"avatar\":\"mm\",\"guest_info\":\"nick,mail,link\",\"pageSize\":10},\"gitment\":{\"enable\":false,\"mint\":true,\"count\":true,\"lazy\":false,\"cleanly\":false,\"language\":null,\"github_user\":null,\"github_repo\":null,\"client_id\":null,\"client_secret\":null,\"proxy_gateway\":null,\"redirect_protocol\":null},\"needmoreshare2\":{\"enable\":false,\"postbottom\":{\"enable\":false,\"options\":{\"iconStyle\":\"box\",\"boxForm\":\"horizontal\",\"position\":\"bottomCenter\",\"networks\":\"Weibo,Wechat,Douban,QQZone,Twitter,Facebook\"}},\"float\":{\"enable\":false,\"options\":{\"iconStyle\":\"box\",\"boxForm\":\"horizontal\",\"position\":\"middleRight\",\"networks\":\"Weibo,Wechat,Douban,QQZone,Twitter,Facebook\"}}},\"duoshuo_info\":{\"ua_enable\":true,\"admin_enable\":false,\"user_id\":0},\"facebook_sdk\":{\"enable\":false,\"app_id\":null,\"fb_admin\":null,\"like_button\":null,\"webmaster\":null},\"facebook_comments_plugin\":{\"enable\":false,\"num_of_posts\":10,\"width\":\"100%\",\"scheme\":\"light\"},\"vkontakte_api\":{\"enable\":false,\"app_id\":null,\"like\":true,\"comments\":true,\"num_of_posts\":10},\"rating\":{\"enable\":false,\"id\":null,\"color\":\"fc6423\"},\"leancloud_visitors\":{\"enable\":false,\"app_id\":null,\"app_key\":null},\"firestore\":{\"enable\":false,\"collection\":\"articles\",\"apiKey\":null,\"projectId\":null,\"bluebird\":false},\"busuanzi_count\":{\"enable\":false,\"site_uv\":true,\"site_uv_header\":\"\",\"site_uv_footer\":null,\"site_pv\":true,\"site_pv_header\":\"\",\"site_pv_footer\":null,\"page_pv\":true,\"page_pv_header\":\"\",\"page_pv_footer\":null},\"baidu_push\":false,\"calendar\":{\"enable\":false,\"calendar_id\":\"\",\"api_key\":\"\",\"orderBy\":\"startTime\",\"offsetMax\":24,\"offsetMin\":4,\"timeZone\":null,\"showDeleted\":false,\"singleEvents\":true,\"maxResults\":250},\"algolia_search\":{\"enable\":false,\"hits\":{\"per_page\":10},\"labels\":{\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}},\"local_search\":{\"enable\":false,\"trigger\":\"auto\",\"top_n_per_article\":1},\"exturl\":false,\"note\":{\"style\":\"simple\",\"icons\":false,\"border_radius\":3,\"light_bg_offset\":0},\"label\":true,\"tabs\":{\"enable\":true,\"transition\":{\"tabs\":false,\"labels\":true},\"border_radius\":0},\"motion\":{\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\"fancybox\":true,\"pace\":true,\"pace_theme\":\"pace-theme-minimal\",\"canvas_nest\":false,\"three_waves\":false,\"canvas_lines\":false,\"canvas_sphere\":false,\"canvas_ribbon\":{\"enable\":false,\"size\":300,\"alpha\":0.6,\"zIndex\":-1},\"vendors\":{\"_internal\":\"lib\",\"jquery\":null,\"fancybox\":null,\"fancybox_css\":null,\"fastclick\":null,\"lazyload\":null,\"velocity\":null,\"velocity_ui\":null,\"ua_parser\":null,\"fontawesome\":null,\"algolia_instant_js\":null,\"algolia_instant_css\":null,\"pace\":null,\"pace_css\":null,\"canvas_nest\":null,\"three\":null,\"three_waves\":null,\"canvas_lines\":null,\"canvas_sphere\":null,\"canvas_ribbon\":null,\"han\":null,\"needMoreShare2\":null},\"css\":\"css\",\"js\":\"js\",\"images\":\"images\",\"version\":\"5.1.4\"}"},{"title":"tags","date":"2018-06-27T11:18:10.000Z","updated":"2019-01-08T05:44:21.129Z","comments":true,"path":"tags/index.html","permalink":"https://juanhuang99.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"彻底弄懂promise","slug":"彻底弄懂promise","date":"2019-04-12T06:03:25.000Z","updated":"2019-04-12T06:04:48.583Z","comments":true,"path":"/blog/2019/04/12/彻底弄懂promise/","link":"","permalink":"https://juanhuang99.github.io/blog/2019/04/12/彻底弄懂promise/","excerpt":"1.什么是promisepromise是es6的一个重要特性，用于实现异步。promise对象拥有一个叫做状态的属性，该属性不受外界影响，修改后不能再次变化。而Promise是一个构造函数，可以生成promise对象。","text":"1.什么是promisepromise是es6的一个重要特性，用于实现异步。promise对象拥有一个叫做状态的属性，该属性不受外界影响，修改后不能再次变化。而Promise是一个构造函数，可以生成promise对象。 常见用法：123456789101112var a = new Promise(function (res, rej) &#123; console.log(&apos;1&apos;) if (1) &#123; res(3) &#125; else &#123; rej() &#125;&#125;)a.then(function (val) &#123; console.log(val)&#125;)console.log(2) 输出顺序是1,2,3,为什么呢？Promise对象表示未来某个将要发生的事件，但在创建（new）Promise时，作为Promise参数传入的函数是会被立即执行的，只是其中执行的代码可以是异步代码。因此会马上输出1，而then中的方法是被放到mircotask队列中，在当前的代码执行完后在执行。因此先输出2，再输出3 2.构造函数的四个方法Promise构造函数上带有resolve，race，all，reject四个方法，他们的共同点是都会返回一个promise。让我们来分别了解下。 #####resolveresolve接受一个值或是promise对象，如果接受的是promise对象，会直接返回该promise对象，否则返回完成状态的promise对象。123Promise.resolve(3).then(res =&gt; console.log(res))// 3var a = Promise.resolve(3)console.log(Promise.resolve(a) === a) // true #####reject类似resolve，返回的是拒绝状态的promise #####all效果：谁跑的慢，以谁为准执行回调Promise.all接受一个数组，分为三种情况: 传入空数组，返回完成状态的promise 传入的数组中没有promise，返回异步完成的prmise 传入的数组中有promise，返回处于pending状态的promise对象，在数组中的promise都成功或者有一个失败时，变成完成状态或拒绝状态 #####race效果：谁跑的快，以谁为准执行回调同all有点接近，在某个promise完成后，返回该值，根据状态来决定返回的是完成状态还是拒绝状态的promise如果传入的是空数组，返回的promise永远是等待 3.promise对象的方法promise带有then和catch两个方法 #####thenthen接受两个参数，返回一个promise。第一个参数是promise在成功的情况下的回调函数，第二个参数是失败情况下的(可选) 如果then中的回调函数返回一个值，那么then返回的Promise将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。 如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。 如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。 如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。 如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。 #####catch作用和then的第二个参数一样，用来指定reject的回调。还有另外一个作用：在执行resolve的回调（也就是then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。 参考：大白话讲解Promise（一）来聊聊promise","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://juanhuang99.github.io/tags/ES6/"}]},{"title":"exports、module.exports、export、export default的区别","slug":"exports、module.exports、export、export default的区别","date":"2019-01-07T09:22:11.000Z","updated":"2019-01-08T06:41:30.425Z","comments":true,"path":"/blog/2019/01/07/exports、module.exports、export、export default的区别/","link":"","permalink":"https://juanhuang99.github.io/blog/2019/01/07/exports、module.exports、export、export default的区别/","excerpt":"exports、module.exports、export、export default都是模块导出，它们之间又有什么区别，为了不继续混乱下去，是时候把它们的关系捋捋清楚了。","text":"exports、module.exports、export、export default都是模块导出，它们之间又有什么区别，为了不继续混乱下去，是时候把它们的关系捋捋清楚了。 使用范围require: node 和 es6 都支持的引入export / import : 只有es6 支持的导出引入module.exports / exports: 只有 node 支持的导出 node中的模块导入导出exports 和 module.exports在一个node执行一个文件时，会给这个文件内生成一个 exports和module对象，而module又有一个exports属性。他们之间的关系如下图，都指向一块{}内存区域。看个代码例子： 123456789101112//utils.jslet a = 100;console.log(module.exports); //能打印出结果为：&#123;&#125;console.log(exports); //能打印出结果为：&#123;&#125;exports.a = 200; //这里辛苦劳作帮 module.exports 的内容给改成 &#123;a : 200&#125;exports = &apos;指向其他内存区&apos;; //这里把exports的指向指走//test.jsvar a = require(&apos;/utils&apos;);console.log(a) // 打印为 &#123;a : 200&#125; 从上面可以看出，其实require导出的内容是module.exports的指向的内存块内容，并不是exports的。他们之间的区别就是exports只辅助module.exports操作内存中的数据，最后真正被require出去的内容还是module.exports。简而言之就是exports 只是 module.exports的引用。 ES6中的模块导入导出export 和 export default它们之间的区别是：1.export与export default均可用于导出常量、函数、文件、模块等2.在一个文件或模块中，export、import可以有多个，export default仅有一个3.通过export方式导出，在导入时要加{ }，export default则不需要4.export能直接导出变量表达式，export default不行。 看个代码例子： 1234567891011121314151617181920//testEs6Export.js&apos;use strict&apos;//导出变量export const a = &apos;100&apos;; //导出方法export const dogSay = function()&#123; console.log(&apos;wang wang&apos;);&#125;//导出方法第二种function catSay()&#123;console.log(&apos;miao miao&apos;); &#125;export &#123; catSay &#125;;//export default导出const m = 100;export default m; //export defult const m = 100;// 这里不能写这种格式。 123456789101112131415161718192021222324//index.js&apos;use strict&apos;var express = require(&apos;express&apos;);var router = express.Router();import &#123; dogSay, catSay &#125; from &apos;./testEs6Export&apos;; //导出了 export 方法 import m from &apos;./testEs6Export&apos;; //导出了 export default import * as testModule from &apos;./testEs6Export&apos;; //as 集合成对象导出/* GET home page. */router.get(&apos;/&apos;, function(req, res, next) &#123;dogSay();catSay();console.log(m);testModule.dogSay();console.log(testModule.m); // undefined , 因为 as 导出是 把 零散的 export 聚集在一起作为一个对象，而export default 是导出为 default属性。console.log(testModule.default); // 100res.send(&apos;恭喜你，成功验证&apos;);&#125;);module.exports = router;","categories":[],"tags":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://juanhuang99.github.io/tags/nodeJs/"},{"name":"ES6","slug":"ES6","permalink":"https://juanhuang99.github.io/tags/ES6/"}]},{"title":"hexo的next主题个性化教程","slug":"hexo的next主题个性化教程","date":"2018-06-25T10:51:59.000Z","updated":"2019-01-08T05:47:37.544Z","comments":true,"path":"/blog/2018/06/25/hexo的next主题个性化教程/","link":"","permalink":"https://juanhuang99.github.io/blog/2018/06/25/hexo的next主题个性化教程/","excerpt":"hexo的next主题个性化教程：点击","text":"hexo的next主题个性化教程：点击 Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://juanhuang99.github.io/tags/hexo/"}]}]}